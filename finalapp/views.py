from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.models import User
from django.contrib import messages
from .models import Member, ElectricityUsage, Room, Payment, Complaint, LeaseAgreement, News, Notification
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required, user_passes_test
from .forms import MemberForm ,ComplaintForm, PaymentForm, LeaseAgreementForm, NewsForm
from datetime import datetime
from decimal import Decimal  
from django.apps import apps
from django.core.files.storage import FileSystemStorage
from django.utils.encoding import force_str
from django.db.models import Sum
import json
from django.http import JsonResponse
import os

Room = apps.get_model('finalapp', 'Room')
Member = apps.get_model('finalapp', 'Member')

def check_email(request):
    email = request.GET.get('email', None)
    if email and User.objects.filter(email=email).exists():
        return JsonResponse({'exists': True})
    return JsonResponse({'exists': False})

def check_phone(request):
    phone = request.GET.get('phone', None)
    if phone and Member.objects.filter(phone=phone).exists():
        return JsonResponse({'exists': True})
    return JsonResponse({'exists': False})

def is_admin(user):
    return user.is_authenticated and hasattr(user, 'member') and user.member.role == 'admin'

def index(request):
    create_admin_account_once()
    rooms = Room.objects.all()
    for room in rooms:
        room.room_type_display = room.get_room_type_display()  
    return render(request, "myapp/index.html", {"rooms": rooms})

def login_view(request):
    if request.method == 'POST':
        email = request.POST.get('email', '').strip()
        password = request.POST.get('password', '').strip()

        try:
            user = User.objects.get(email=email)  
            user = authenticate(request, username=user.username, password=password) 
        except User.DoesNotExist:
            user = None

        if user is not None:
            login(request, user)
            member = Member.objects.get(user=user)

            if member.role == 'admin':
                return redirect('/manage/home/') 
            else:
                return redirect('home')  

    return render(request, 'myapp/login.html')

def register(request):
    if request.method == 'POST':
        fullname = request.POST.get('fullname', '')
        email = request.POST.get('email', '')
        phone = request.POST.get('phone', '')
        password = request.POST.get('password', '')
        confirm_password = request.POST.get('confirm_password', '')

        if password == confirm_password:
            if not User.objects.filter(username=email).exists() and not Member.objects.filter(phone=phone).exists():
                user = User.objects.create_user(username=email, email=email, password=password)
                user.save()

                Member.objects.create(
                    user=user,
                    fullname=fullname,
                    email=email,
                    phone=phone
                )

                return redirect('login')  # ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    return render(request, 'myapp/register.html')

def create_admin_account_once():
    email = os.getenv('ADMIN_EMAIL', 'admin@example.com')
    phone = os.getenv('ADMIN_PHONE', '0999999999')
    fullname = os.getenv('ADMIN_FULLNAME', 'Test Admin')
    password = os.getenv('ADMIN_PASSWORD', '1234')

    if not User.objects.filter(username=email).exists():
        user = User.objects.create_user(username=email, email=email, password=password)
        user.is_staff = True
        user.is_superuser = True
        user.save()

        Member.objects.create(
            user=user,
            fullname=fullname,
            email=email,
            phone=phone,
            role='admin'
        )

def admin_register(request):
    if request.method == 'POST':
        fullname = request.POST.get('fullname', '')
        email = request.POST.get('email', '')
        phone = request.POST.get('phone', '')
        password = request.POST.get('password', '')
        confirm_password = request.POST.get('confirm_password', '')

        if password == confirm_password:
            if not User.objects.filter(username=email).exists() and not Member.objects.filter(phone=phone).exists():
                user = User.objects.create_user(username=email, email=email, password=password)
                user.save()

                Member.objects.create(
                    user=user,
                    fullname=fullname,
                    email=email,
                    phone=phone,
                    role='admin'  # üëà ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô admin
                )

                return redirect('login')  # ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ admin login ‡∏Å‡πá‡πÑ‡∏î‡πâ
    return render(request, 'myapp/admin_register.html')

@login_required(login_url='login')
def home(request):
    member = request.user.member
    user_room = member.room  # ‡∏î‡∏∂‡∏á room ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ú‡πà‡∏≤‡∏ô member.room
    return render(request, 'myapp/home.html', {'member': member, 'room': user_room})

@login_required(login_url='login')
def logout_view(request):
    logout(request)  
    return redirect('index')  

@login_required(login_url='login')  
def profile_view(request):
    member = Member.objects.get(user=request.user)
    return render(request, 'myapp/user/profile_member.html', {'member': member})

@login_required(login_url='login')  
def edit_profile_view(request):
    member = Member.objects.get(user=request.user)
    if request.method == 'POST':
        form = MemberForm(request.POST, request.FILES, instance=member)
        if form.is_valid():
            form.save()
            return redirect('profile') 
    else:
        form = MemberForm(instance=member)
    return render(request, 'myapp/user/edit_profile.html', {'form': form})

@login_required(login_url='login')  
def rent_check_view(request):
    Member = apps.get_model('finalapp', 'Member')
    Room = apps.get_model('finalapp', 'Room')
    ElectricityUsage = apps.get_model('finalapp', 'ElectricityUsage')
    Payment = apps.get_model('finalapp', 'Payment')  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Payment
    user = request.user

    try:
        member = Member.objects.get(user=user)
    except Member.DoesNotExist:
        return render(request, "myapp/payment/rent_check.html", {
            "user_room": None,
            "room_not_found": True
        })

    user_room = member.room

    if not user_room:
        messages.warning(request, "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
        return render(request, "myapp/payment/rent_check.html", {
            "user_room": None,
            "room_not_found": True
        })

    selected_month = request.GET.get("month")
    available_months = ElectricityUsage.objects.filter(room=user_room).values_list("month_year", flat=True).distinct()

    if not selected_month:
        latest_usage = ElectricityUsage.objects.filter(room=user_room).order_by("-month_year").first()
        selected_month = latest_usage.month_year if latest_usage else None

    selected_usage = ElectricityUsage.objects.filter(room=user_room, month_year=selected_month).first()

    electricity_cost = selected_usage.consumption * user_room.electricity_price if selected_usage else 0
    total_cost = user_room.rent_price + electricity_cost + user_room.water_price

    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Payment ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
    payment = Payment.objects.filter(member=member, room=user_room, month_year=selected_month).first()

    return render(request, "myapp/payment/rent_check.html", {
        "user_room": user_room,
        "room_not_found": False,
        "rent_price": user_room.rent_price,
        "electricity_cost": electricity_cost,
        "water_price": user_room.water_price,
        "total_cost": total_cost,
        "selected_month": selected_month,
        "available_months": available_months,
        "selected_usage": selected_usage,
        "payment": payment  # ‚úÖ ‡∏™‡πà‡∏á payment ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ template
    })


@login_required(login_url='login')
def electricity_usage_view(request):
    Member = apps.get_model('finalapp', 'Member')
    Room = apps.get_model('finalapp', 'Room')
    ElectricityUsage = apps.get_model('finalapp', 'ElectricityUsage')

    user = request.user 
    try:
        member = Member.objects.get(user=user)
    except Member.DoesNotExist:
        messages.error(request, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        return render(request, "myapp/meter/electricity_usage.html", {
            "electricity_usages": [],
            "user_room": None,
            "room_not_found": True
        })
    
    user_room = member.room  # ‚úÖ ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á filter ‡∏´‡∏≤

    if not user_room:
        messages.warning(request, "‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô")
        return render(request, "myapp/meter/electricity_usage.html", {
            "electricity_usages": [],
            "user_room": None,
            "room_not_found": True
        })

    electricity_usages = ElectricityUsage.objects.filter(room=user_room).order_by("month_year")

    return render(request, "myapp/meter/electricity_usage.html", {
        "electricity_usages": electricity_usages,
        "user_room": user_room.room_number,
        "room_not_found": False
    })

@login_required(login_url='login')
def complaint_view(request):
    user = request.user 
    try:
        member = Member.objects.get(user=user)  
    except Member.DoesNotExist:
        messages.error(request, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
        return redirect('home')

    room = member.room  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å member

    if request.method == 'POST':
        form = ComplaintForm(request.POST)
        if form.is_valid():
            room_from_form = form.cleaned_data.get('room')  # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏≠‡∏á
            description = form.cleaned_data.get('description')

            if room_from_form and description:
                complaint = form.save(commit=False)
                complaint.member = member
                complaint.room = room_from_form
                try:
                    complaint.save()
                    messages.success(request, "‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß")
                    return redirect('complaint_success')
                except Exception as e:
                    messages.error(request, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
            else:
                messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        else:
            messages.error(request, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    else:
        form = ComplaintForm(initial={'room': room})  # Pre-fill ‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢

    context = {
        'form': form,
        'room': room,
    }
    return render(request, "myapp/complaint/complaint.html", context)


@login_required(login_url='login')
def complaint_success(request):
    return render(request, 'myapp/complaint/complaint_success.html')

@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_home(request):
    total_monthly_rent = Payment.objects.filter(status="approved", month_year__isnull=False) \
        .aggregate(total=Sum("amount"))["total"] or 0

    total_monthly_rent = float(total_monthly_rent)  

    total_tenants = Member.objects.filter(role="user").count()
    total_rooms = Room.objects.count()


    monthly_data = Payment.objects.filter(status="approved", month_year__isnull=False) \
        .values("month_year").annotate(total=Sum("amount")).order_by("month_year")
    
    monthly_labels = [entry["month_year"] for entry in monthly_data]
    monthly_values = [float(entry["total"]) for entry in monthly_data]  


    yearly_data = Payment.objects.filter(status="approved", month_year__isnull=False) \
        .values("month_year").annotate(total=Sum("amount"))

    yearly_revenue = {}
    for entry in yearly_data:
        year = entry["month_year"].split("-")[0] 
        if year not in yearly_revenue:
            yearly_revenue[year] = 0
        yearly_revenue[year] += float(entry["total"])

    yearly_labels = list(yearly_revenue.keys())
    yearly_values = list(yearly_revenue.values())

    context = {
        "total_monthly_rent": total_monthly_rent,
        "total_tenants": total_tenants,
        "total_rooms": total_rooms,
        "monthly_labels": json.dumps(monthly_labels),
        "monthly_data": json.dumps(monthly_values),
        "yearly_labels": json.dumps(yearly_labels), 
        "yearly_data": json.dumps(yearly_values),
    }
    return render(request, "myapp/admin_home.html", context)

@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_user_list(request):
    users = Member.objects.all()
    admins_count = users.filter(role="admin").count()
    users_count = users.filter(role="user").count()

    context = {
        'users': users,
        'admins_count': admins_count,
        'users_count': users_count
    }

    return render(request, 'myapp/user/admin_user_list.html', context)

@login_required(login_url='login')
@user_passes_test(is_admin)
def get_user_profile(request, user_id):
    try:
        user = Member.objects.get(id=user_id)
        data = {
            "fullname": user.fullname,
            "email": user.email,
            "phone": user.phone,
            "address": user.address or "-",
            "sex": user.sex or "-",
            "birthday": user.birthday.strftime("%d/%m/%Y") if user.birthday else "-",
            "profile": user.profile_picture.url if user.profile_picture else "/static/images/default_profile.png",
            "role": user.role
        }
        return JsonResponse(data)
    except Member.DoesNotExist:
        return JsonResponse({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}, status=404)


### ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
@login_required(login_url='login')
@user_passes_test(is_admin)
def change_user_role(request, user_id, new_role):
    member = get_object_or_404(Member, id=user_id)
    if new_role in ['admin', 'user']:
        member.role = new_role
        member.save()
        messages.success(request, f"Updated {member.fullname} to {new_role}")
    else:
        messages.error(request, "Invalid role")
    return redirect('admin_user_list')

### ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö User
@login_required(login_url='login')
@user_passes_test(is_admin)
def delete_user(request, user_id):
    member = get_object_or_404(Member, id=user_id)
    member.delete()
    messages.success(request, f"Deleted {member.fullname}")
    return redirect('admin_user_list')

@login_required(login_url='login')
@user_passes_test(is_admin)
def add_user(request):
    if request.method == "POST":
        fullname = request.POST.get('fullname')
        email = request.POST.get('email')
        phone = request.POST.get('phone')

        Member.objects.create(fullname=fullname, email=email, phone=phone, role="user")
        messages.success(request, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return redirect('admin_home')
    
@login_required(login_url='login')
@user_passes_test(is_admin)
def edit_user(request):
    if request.method == "POST":
        user = get_object_or_404(Member, id=request.POST.get('user_id'))
        user.fullname = request.POST.get('fullname')
        user.email = request.POST.get('email')
        user.phone = request.POST.get('phone')
        user.save()
        messages.success(request, "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    return redirect('admin_home')

@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_room(request):
    rooms = Room.objects.all().order_by('room_number')
    members = Member.objects.filter(role='user', room__isnull=True)
    room_members = {member.room_id: member for member in Member.objects.filter(role='user', room__isnull=False)}

    return render(request, 'myapp/room/admin_room.html', {
        'rooms': rooms,
        'members': members,
        'room_members': room_members
    })

@login_required(login_url='login')
@user_passes_test(is_admin)
def add_room(request):
    if request.method == "POST":
        room_number = request.POST.get('room_number')
        room_type = request.POST.get('room_type')
        size = request.POST.get('size')
        status = request.POST.get('status', 'available')
        rent_price = request.POST.get('rent_price', 0)
        electricity_price = request.POST.get('electricity_price', 0)
        water_price = request.POST.get('water_price', 0)

        # ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å checkbox ‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å
        facilities = request.POST.getlist('facilities')

        # ‚úÖ ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        image = request.FILES.get('image')

        if not room_number or not room_type or not size:
            messages.error(request, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡πâ‡∏≠‡∏á, ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            return redirect('admin_room_add')

        try:
            size = float(size)
            rent_price = float(rent_price)
            electricity_price = float(electricity_price)
            water_price = float(water_price)
        except ValueError:
            messages.error(request, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return redirect('admin_room_add')

        # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Default ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á
        if not image:
            if room_type == "Standard":
                image = "room_images/default_standard.png"
            elif room_type == "Deluxe":
                image = "room_images/default_deluxe.png"
            else:
                image = "room_images/default_room.png"

        facilities = request.POST.getlist('facilities')

        Room.objects.create(
            room_number=room_number,
            room_type=room_type,
            size=size,
            status=status,
            rent_price=rent_price,
            electricity_price=electricity_price,
            water_price=water_price,
            facilities=json.dumps(facilities),  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á list ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            image=image
        )

        messages.success(request, "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return redirect('admin_room')

    return render(request, "myapp/room/admin_room_add.html")


@login_required(login_url='login')
@user_passes_test(is_admin)
def update_member(request, room_id):
    room = get_object_or_404(Room, id=room_id)

    if request.method == "POST":
        member_id = request.POST.get('member_id')

        # ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤)
        previous_member = Member.objects.filter(room=room).first()
        if previous_member:
            previous_member.room = None
            previous_member.save()

        if member_id:
            tenant = get_object_or_404(Member, id=member_id)

            tenant.room = room  # ‚úÖ ‡πÉ‡∏´‡πâ Member ‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏ä‡πà‡∏≤ Room ‡∏ô‡∏µ‡πâ
            tenant.save()

            room.status = "occupied"
        else:
            room.status = "available"

        room.save()

        messages.success(request, f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {tenant.fullname if member_id else '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤'}")
        return redirect('admin_room')


@login_required(login_url='login')
@user_passes_test(is_admin)
def move_tenant(request):
    if request.method == "POST":
        old_room = get_object_or_404(Room, id=request.POST.get('old_room_id'))
        new_room = get_object_or_404(Room, id=request.POST.get('new_room_id'))

        if old_room.tenant:
            tenant = old_room.tenant
            tenant.room = new_room  # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `Member.room`
            tenant.save()

            new_room.tenant = tenant
            old_room.tenant = None
            old_room.save()
            new_room.save()

            messages.success(request, "‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    return redirect('admin_room')

@login_required(login_url='login')
@user_passes_test(is_admin)
def remove_member(request, room_id):
    room = get_object_or_404(Room, id=room_id)

    # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà Member ‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Room
    member = Member.objects.filter(room=room).first()
    if member:
        member.room = None
        member.save()

    room.status = "available"
    room.save()

    return redirect('admin_room')



@login_required(login_url='login')
@user_passes_test(is_admin)
def delete_room(request, room_id):
    """ ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö """
    room = get_object_or_404(Room, id=room_id)
    room.delete()
    return redirect('admin_room')

@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_meter_list(request):
    """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ Admin ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏µ, ‡∏´‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô """
    user = request.user
    try:
        member = Member.objects.get(user=user)
    except Member.DoesNotExist:
        messages.error(request, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        return redirect('home')

    if member.role != 'admin':
        messages.error(request, "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
        return redirect('home')

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏µ, ‡∏´‡πâ‡∏≠‡∏á, ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å GET parameter
    selected_year = request.GET.get('year', str(datetime.now().year))  # ‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    selected_room = request.GET.get('room', '')  # ‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á
    selected_month = request.GET.get('month', '')  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    rooms = Room.objects.all()

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    current_year = datetime.now().year
    years = [str(current_year)]  # ‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡πà‡∏õ‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô



    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    months = sorted(set(y.split('-')[1] for y in ElectricityUsage.objects.values_list('month_year', flat=True).distinct()))

    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏µ, ‡∏´‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    meter_records = ElectricityUsage.objects.filter(month_year__startswith=selected_year)
    if selected_room:
        meter_records = meter_records.filter(room__room_number=selected_room)
    if selected_month:
        meter_records = meter_records.filter(month_year__endswith=f"-{selected_month}")

    return render(request, "myapp/meter/admin_meter_list.html", {
        "rooms": rooms,
        "years": years,
        "months": months,
        "meter_records": meter_records,
        "selected_year": selected_year,
        "selected_room": selected_room,
        "selected_month": selected_month
    })

@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_add_meter(request):
    if request.method == "POST":
        room_number = request.POST.get("room_id")
        year = request.POST.get("year")
        month = request.POST.get("month")
        current_reading = request.POST.get("current_meter_reading")

        if not (room_number and year and month and current_reading):
            messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
            return redirect('admin_meter_list')

        month_year = f"{year}-{month}"

        try:
            room = Room.objects.get(room_number=room_number)

            previous_month = int(month) - 1
            previous_year = int(year)
            if previous_month == 0:
                previous_month = 12
                previous_year -= 1
            previous_month_year = f"{previous_year}-{previous_month:02d}"

            last_usage = ElectricityUsage.objects.filter(room=room, month_year=previous_month_year).first()
            previous_meter = last_usage.current_meter if last_usage else Decimal(0)

            current_reading_decimal = Decimal(current_reading)

            if current_reading_decimal < previous_meter:
                messages.error(request, "‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤!")
                return redirect('admin_meter_list')

            if ElectricityUsage.objects.filter(room=room, month_year=month_year).exists():
                messages.error(request, f"‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á {room.room_number} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {month_year} ‡πÅ‡∏•‡πâ‡∏ß!")
                return redirect('admin_meter_list')

            ElectricityUsage.objects.create(
                room=room,
                month_year=month_year,
                previous_meter=previous_meter,
                current_meter=current_reading_decimal,
                consumption=current_reading_decimal - previous_meter
            )

            messages.success(request, f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡πâ‡∏≠‡∏á {room.room_number} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {month_year} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        except Room.DoesNotExist:
            messages.error(request, f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á: {room_number}")
        except Exception as e:
            messages.error(request, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")

        return redirect('admin_meter_list')

    # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏µ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô GET ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏µ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° (‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ö‡∏ö GET ‡∏ï‡∏£‡∏á‡πÜ)
    current_year = datetime.now().year
    years = list(range(2023, current_year + 1))
    return render(request, 'room/admin_add_meter.html', {
        'years': years
    })



@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_edit_meter(request, meter_id):
    """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ Admin ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå """
    
    meter = get_object_or_404(ElectricityUsage, id=meter_id)

    if request.method == "POST":
        new_reading = request.POST.get("current_meter_reading")

        meter.current_meter = Decimal(new_reading)  # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Decimal
        meter.consumption = meter.current_meter - (meter.previous_meter or Decimal(0))
        meter.save()

        messages.success(request, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return redirect('admin_meter_list')

    return render(request, "myapp/admin_edit_meter.html", {"meter": meter})

@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_delete_meter(request, meter_id):
    """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ Admin ‡∏•‡∏ö‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå """
    
    meter = get_object_or_404(ElectricityUsage, id=meter_id)
    meter.delete()
    messages.success(request, "‡∏•‡∏ö‡πÄ‡∏•‡∏Ç‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    return redirect('admin_meter_list')

@login_required(login_url='login')
@user_passes_test(is_admin)
def edit_room(request, room_id):
    room = get_object_or_404(Room, id=room_id)

    if request.method == "POST":
        room.description = request.POST.get("description")
        room.rent_price = request.POST.get("rent_price")
        room.electricity_price = request.POST.get("electricity_price")
        room.water_price = request.POST.get("water_price")
        room.save()
        messages.success(request, f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á {room.room_number} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return redirect('index')

    return render(request, "edit_room.html", {"room": room})


@login_required(login_url='login')
@user_passes_test(is_admin)
def approve_payment(request, payment_id):
    try:
        payment = get_object_or_404(Payment, id=payment_id)

        if payment.status != 'approved':
            payment.status = 'approved'
            payment.save()

            # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÉ‡∏ä‡πâ payment.member ‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏á‡πÜ
            Notification.objects.create(
                member=payment.member,
                message=f"‚úÖ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {payment.month_year} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß"
            )

            messages.success(request, "‚úÖ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß")
    except Payment.DoesNotExist:
        messages.error(request, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")

    return redirect('admin-payments')



@login_required(login_url='login')
def payment_page_view(request):
    user = request.user
    try:
        member = Member.objects.get(user=user)
        room = member.room
    except Member.DoesNotExist:
        messages.error(request, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
        return redirect('rent-check')

    # ‚úÖ ‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    selected_month = request.GET.get('month')
    if not selected_month:
        selected_month = ElectricityUsage.objects.filter(room=room).order_by("-month_year").values_list("month_year", flat=True).first()

    selected_usage = ElectricityUsage.objects.filter(room=room, month_year=selected_month).first()

    rent_price = room.rent_price
    electricity_price = room.electricity_price
    water_price = room.water_price
    electricity_cost = (selected_usage.consumption * electricity_price) if selected_usage else 0
    total_cost = rent_price + electricity_cost + water_price

    # ‚úÖ ‡∏î‡∏∂‡∏á Payment (‡πÅ‡∏ï‡πà **‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á**)
    payment = Payment.objects.filter(
        member=member,
        room=room,
        month_year=selected_month
    ).first()

    if request.method == 'POST' and 'slip' in request.FILES:
        if not payment:
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Payment ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
            payment = Payment.objects.create(
                member=member,
                room=room,
                month_year=selected_month,
                amount=total_cost,
                status='pending'
            )
        
        form = PaymentForm(request.POST, request.FILES, instance=payment)
        if form.is_valid():
            payment.slip = form.cleaned_data['slip']
            payment.status = 'pending'
            payment.amount = total_cost
            payment.save()
            return redirect('payment-success')
        else:
            messages.error(request, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    else:
        form = PaymentForm()

    context = {
        'form': form,
        'payment': payment,
        'selected_month': selected_month,
        'total_cost': total_cost
    }

    return render(request, "myapp/payment/payment_page.html", context)

@login_required(login_url='login')
def payment_success(request):
    return render(request, "myapp/payment/payment_success.html")

@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_payments_view(request):
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô """
    status_filter = request.GET.get("status", "all")  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Dropdown
    if status_filter == "pending":
        payments = Payment.objects.filter(status="pending")
    elif status_filter == "approved":
        payments = Payment.objects.filter(status="approved")
    elif status_filter == "rejected":
        payments = Payment.objects.filter(status="rejected")
    else:
        payments = Payment.objects.all()  # ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    return render(request, "myapp/payment/admin_payments.html", {"payments": payments, "selected_status": status_filter})

@login_required(login_url='login')
@user_passes_test(is_admin)
def reject_payment(request, payment_id):
    """ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• """
    try:
        payment = get_object_or_404(Payment, id=payment_id)

        # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        payment.status = 'rejected'  # <-- ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ model ‡∏°‡∏µ field ‡∏ä‡∏∑‡πà‡∏≠ 'status'
        payment.save()

        # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        Notification.objects.create(
            member=payment.member,
            message=f"‚ùå ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {payment.month_year} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà"
        )

        messages.success(request, "‚ùå ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ)")
    except Payment.DoesNotExist:
        messages.error(request, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")

    return redirect('admin-payments')



@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_complaint_view(request):
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    complaints = Complaint.objects.all()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á POST ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if request.method == 'POST':
        complaint_id = request.POST.get('complaint_id')
        status = request.POST.get('status')

        if complaint_id and status:
            try:
                complaint = Complaint.objects.get(id=complaint_id)
                complaint.status = status
                complaint.save()
                messages.success(request, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
            except Complaint.DoesNotExist:
                messages.error(request, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï")
        else:
            messages.error(request, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")

    # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á template
    context = {
        'complaints': complaints,
    }

    return render(request, "myapp/complaint/admin_complaint.html", context)


@login_required(login_url='login')
@user_passes_test(is_admin)
def update_complaint_status(request, complaint_id, status):
    complaint = get_object_or_404(Complaint, id=complaint_id)
    complaint.status = status
    complaint.save()

    # ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏´‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà member ‡∏ï‡∏£‡∏á
    member = Member.objects.filter(room=complaint.room).first()

    if member:
        if status == 'approved':
            # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
            Notification.objects.create(
                member=member,
                message=f"‚úÖ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á {complaint.room.room_number} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß",
            )
        elif status == 'rejected':
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
            Notification.objects.create(
                member=member,
                message=f"‚ùå ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á {complaint.room.room_number} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà",
            )


    return redirect('admin_complaint')


@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_add_lease(request, tenant_id):
    member = get_object_or_404(Member, id=tenant_id)

    if request.method == "POST":
        form = LeaseAgreementForm(request.POST, request.FILES)
        if form.is_valid():
            lease = form.save(commit=False)
            lease.member = member
            lease.room = member.room  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏´‡∏ô
            lease.save()
            return redirect('admin_add_lease_success')
    else:
        form = LeaseAgreementForm()

    return render(request, 'myapp/lease/admin_add_lease.html', {'form': form, 'member': member})

@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_add_lease_success(request):
    return render(request, 'myapp/lease/admin_add_lease_success.html')


@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_manage_leases(request):
    members = Member.objects.filter(role='user')  
    leases = {lease.member.id: lease for lease in LeaseAgreement.objects.all()}  # ‚úÖ ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å tenant ‡πÄ‡∏õ‡πá‡∏ô member

    for member in members:
        member.lease = leases.get(member.id, None)

    return render(request, 'myapp/lease/admin_manage_lease.html', {
        'members': members,
    })


@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_edit_lease(request, lease_id):
    lease = get_object_or_404(LeaseAgreement, id=lease_id)
    
    if request.method == "POST":
        form = LeaseAgreementForm(request.POST, request.FILES, instance=lease)
        if form.is_valid():
            form.save()
            return redirect('admin_add_lease_success')  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    else:
        form = LeaseAgreementForm(instance=lease)
    
    return render(request, 'myapp/lease/admin_edit_lease.html', {'form': form, 'lease': lease})


@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_delete_lease(request, lease_id):
    lease = get_object_or_404(LeaseAgreement, id=lease_id)
    lease.delete()
    return redirect('admin_manage_leases')

    
@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_view_lease(request):
    member = request.user.member  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    lease = LeaseAgreement.objects.filter(tenant=member).first()  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å

    return render(request, 'myapp/user/view_lease.html', {'lease': lease, 'member': member})

@login_required(login_url='login')
def user_view_lease(request):
    member = request.user.member 
    lease = LeaseAgreement.objects.filter(member=member).first()  
    return render(request, 'myapp/lease/view_lease.html', {'lease': lease, 'member': member})



@login_required(login_url='login')
def view_news(request):
    news_list = News.objects.all().order_by("-created_at")
    notifications = Notification.objects.filter(
        member=request.user.member,
        message__startswith="üì∞"  
    ).order_by("-created_at")

    return render(request, 'myapp/news/view_news.html', {
        'news_list': news_list,
        'notifications': notifications  
    })


@login_required(login_url='login')
@user_passes_test(is_admin)
def admin_manage_news(request):
    news_list = News.objects.all().order_by("-created_at")
    return render(request, 'myapp/news/admin_manage_news.html', {'news_list': news_list})

@login_required(login_url='login')
@user_passes_test(is_admin)
def add_news(request):
    if request.method == 'POST':
        title = request.POST.get('title')
        content = request.POST.get('content')
        image = request.FILES.get('image')

        news = News.objects.create(title=title, content=content, image=image)

        # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `force_str` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô `utf8mb4`
        members = Member.objects.all()
        for member in members:
            Notification.objects.create(
                member=member,
                message=force_str(f"üì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏´‡∏°‡πà: {news.title}")
            )

        messages.success(request, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        return redirect('admin_manage_news')

    return render(request, 'myapp/news/admin_add_news.html')

@login_required(login_url='login')
@user_passes_test(is_admin)
def edit_news(request, news_id):
    news = get_object_or_404(News, id=news_id)
    if request.method == 'POST':
        form = NewsForm(request.POST, request.FILES, instance=news)
        if form.is_valid():
            form.save()
            messages.success(request, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
            return redirect('admin_manage_news')
    else:
        form = NewsForm(instance=news)
    return render(request, 'myapp/news/admin_edit_news.html', {'form': form})



@login_required(login_url='login')
@user_passes_test(is_admin)
def delete_news(request, news_id):
    news = get_object_or_404(News, id=news_id)
    news.delete()
    messages.success(request, "‡∏•‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    return redirect('admin_manage_news')

@login_required(login_url='login')
def notifications_view(request):
    member = request.user.member
    notifications = member.notifications.all().order_by('-created_at')  
    return render(request, 'myapp/notifications.html', {'notifications': notifications})


@login_required(login_url='login')
def mark_notifications_as_read(request):
    if request.method == "POST":
        print("‚úÖ DEBUG: Marking notifications as read...")  # << ‡πÄ‡∏û‡∏¥‡πà‡∏° Debug ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
        
        member = request.user.member
        unread_notifications = member.notifications.filter(is_read=False)
        
        print(f"üîπ DEBUG: ‡∏û‡∏ö {unread_notifications.count()} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô")  # << Debug ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        
        unread_notifications.update(is_read=True)  # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        
        messages.success(request, "‚úÖ ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        return redirect('notifications')

    print("‚ùå DEBUG: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà POST Request")  # Debug ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
    return redirect('notifications')

